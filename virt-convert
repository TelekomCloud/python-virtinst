#!/usr/bin/python 
#
# Convert a VMware(tm) virtual machine into an XML image description
#
# Copyright 2008  Red Hat, Inc.
# Joey Boggs <jboggs@redhat.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301 USA.

import sys
from string import ascii_letters
import virtinst.cli as cli
import os
import logging
import errno
from optparse import OptionParser

def parse_args():
    parser = OptionParser()
    parser.set_usage("%prog [options] inputdir|input.vmx "
        "[outputdir|output.xml]")
    parser.add_option("-a", "--arch", type="string", dest="arch",
                      help=("Machine Architecture Type (i686/x86_64/ppc)"))
    parser.add_option("-t", "--type", type="string", dest="type",
                      help=("Output virtualization type (hvm, paravirt"))
    parser.add_option("-d", "--debug", action="store_true", dest="debug",
                      help=("Print debugging information"))
    parser.add_option("-i", "--input-format", action="store_true",
                      dest="inputformat", default="vmx",
                      help=("Input format, e.g. 'vmx'"))
    parser.add_option("-o", "--output-format", action="store_true",
                      dest="outputformat", default="virt-image",
                      help=("Output format, e.g. 'virt-image'"))
    parser.add_option("-v", "--hvm", action="store_true", dest="fullvirt",
                      help=("This guest should be a fully virtualized guest"))
    parser.add_option("-p", "--paravirt", action="store_true", dest="paravirt",
                      help=("This guest should be a paravirtualized guest"))

    (options, args) = parser.parse_args()
    if len(args) < 1:
        parser.error(("You need to provide an input VM definition"))
    if len(args) > 2:
        parser.error(("Too many arguments provided"))
    
    if (options.arch is None):
        parser.error(("Missing option value \n\nArchitecture: " +
       str(options.arch)))

    # hard-code for now
    if options.inputformat != "vmx":
        parser.error(("Unsupported input format \"%s\"" % options.inputformat))
    if options.outputformat != "virt-image":
        parser.error(("Unsupported output format \"%s\""
            % options.outputformat))
    if os.path.isdir(args[0]):
        vmx_files = [x for x in os.listdir(args[0]) if x.endswith(".vmx") ]
        if (len(vmx_files)) == 0:
            parser.error(("No VM definition file was found in %s" % args[0]))
        if (len(vmx_files)) > 1:
            parser.error(("Too many .vmx definitions found in %s" % args[0]))
        options.input_file = os.path.join(args[0], vmx_files[0])
        options.input_dir =  args[0]
    else:
        options.input_file = args[0]
        options.input_dir = os.path.dirname(os.path.realpath(args[0]))

    if len(args) == 1:
        options.output_file = None
        options.output_dir = None
    elif os.path.isdir(args[1]) or args[1].endswith("/"):
        options.output_file = None
        options.output_dir = args[1]
    else:
        options.output_file = args[1]
        options.output_dir = os.path.dirname(os.path.realpath(args[1]))

    return options

# Begin creation of xml template from parsed vmx config file
def vmx_to_image_xml(disks_list, record, options, hvm):
    pv_disk_list = []
    fv_disk_list = []
    storage_disk_list = []

    infile = options.input_file

    # validate required values for conversion are in the input vmx file
    if record.has_key("displayName"):
        name = record["displayName"]
    else:
        logging.error("displayName key not parsed from %s" % infile)
        sys.exit(1)

    if record.has_key("memsize"):
        memory = int(record["memsize"]) * 1024
    else:
        logging.error("memsize key not parsed from %s" % infile)
        sys.exit(1)

    if record.has_key("annotation"):
        annotation = record["annotation"]
    else:
        annotation = ""

    if record.has_key("numvcpus"):
        vcpus = record["numvcpus"]
    else:
        vcpus = "1"


# create disk filename lists for xml template
    for (number, dfile) in enumerate(disks_list):
        dfile = str(dfile.replace(".vmdk","")).strip()
        pv_disk_list.append("""<drive disk="%s.img" target="xvd%s"/>""" % \
                               (dfile, ascii_letters[number % 26]))
        fv_disk_list.append("""<drive disk="%s.img" target="hd%s"/>""" % \
                               (dfile, ascii_letters[number % 26]))
        storage_disk_list.append("""<disk file="%s.img" use="system" format="raw"/>""" % (dfile))

# determine virtualization type for image.boot section
    if hvm is False:
        virt_boot_template = """<boot type="xen">
          <guest>
            <arch>%(vm_arch)s</arch>
            <features>
              <pae/>
            </features>
          </guest>
          <os>
            <loader>pygrub</loader>
          </os>
         %(vm_pv_disks)s
         </boot>"""
    elif hvm is True:
        virt_boot_template = """<boot type="hvm">
          <guest>
            <arch>%(vm_arch)s</arch>
          </guest>
          <os>
            <loader dev="hd"/>
          </os>
          %(vm_fv_disks)s
        </boot>"""


# xml replacements dictionaries
    virt_boot_xml_dict = {
        "vm_pv_disks" : "".join(pv_disk_list),
        "vm_fv_disks" : "".join(fv_disk_list),
        "vm_arch" : options.arch,
         }
    virt_boot_template = virt_boot_template % virt_boot_xml_dict
    virt_image_xml_dict = {
        "virt_boot_template" : virt_boot_template,
        "vm_displayName": name.replace(" ","_"),
        "vm_annotation" : annotation,
        "vm_vcpus" : vcpus,
        "vm_mem"  : memory,
        "vm_storage" : "".join(storage_disk_list),
         }
    
    virt_image_xml_template = """<image>
 <name>%(vm_displayName)s</name>
  <label>%(vm_displayName)s</label>
    <description>
        %(vm_annotation)s
    </description>
      <domain>
       %(virt_boot_template)s
        <devices>
         <vcpu>%(vm_vcpus)s</vcpu>
         <memory>%(vm_mem)s</memory>
          <interface/>
          <graphics/>
        </devices>
      </domain>
  <storage>
  %(vm_storage)s
  </storage>
</image>
"""
    
    virtimage_xml_template = virt_image_xml_template % virt_image_xml_dict
    return virtimage_xml_template

# parse input vmware configuration
def parse_vmware_config(options):
    if not os.access(options.input_file, os.R_OK):
        raise ValueError, "Could not read file: %s" % options.input_file
    infile = open(options.input_file, "r")
    contents = infile.readlines()
    infile.close()
    record = {}
    vm_config = []
    disks_list = []

    # strip out comment and blank lines for easy splitting of values
    for line in contents:
        if not line.strip() or line.startswith("#"):
            continue
        else:
            vm_config.append(line)
    
    for line in vm_config:
        before_eq, after_eq = line.split("=", 1)
        key = before_eq.replace(" ","")
        value = after_eq.replace('"',"")
        value = value.strip()
        record[key] = value
        logging.debug("Key: %s      Value: \"%s\"" % (key, value))
        if value.endswith("vmdk"): # separate disks from config
            disks_list.append(value)
    return record, disks_list


def convert_disks(disks_list, options):
    for disk in disks_list:
        infile = disk.strip()
        if not os.path.isabs(infile):
            infile = os.path.join(options.input_dir, infile)

        outfile = disk.replace(".vmdk","").strip()
        outfile += ".img"
        if not os.path.isabs(outfile):
            outfile = os.path.join(options.output_dir, outfile)
        convert_cmd = "qemu-img convert %s -O raw %s" % (infile, outfile)
        ret = os.system(convert_cmd)
        print ret


def main():
    options = parse_args()
    cli.setupLogging("virt-convert", options.debug)

    vm_config = parse_vmware_config(options)
    record, disks_list = vm_config

    if options.paravirt:
        hvm = False
    else:
        hvm = True
    out_contents = vmx_to_image_xml(disks_list, record, options, hvm)

    name = record["displayName"].replace(" ","-")
    if not options.output_dir:
        options.output_dir = name
    try:
        logging.debug("Creating directory %s" % options.output_dir)
        os.mkdir(options.output_dir)
    except OSError, e:
        if (e.errno != errno.EEXIST):
            logging.error("Could not create directory %s: %s" %
                (options.output_dir, str(e)))
            sys.exit(1)

    if not options.output_file:
        options.output_file = os.path.join(options.output_dir,
       "%s.virt-image.xml" % name)

    logging.debug("input_file: %s" % options.input_file)
    logging.debug("input_dir: %s" % options.input_dir)
    logging.debug("output_file: %s" % options.output_file)
    logging.debug("output_dir: %s" % options.input_dir)

    # configuration completed, ready to write config file and convert disks
    out = open(options.output_file, "w")
    out.writelines(out_contents)
    out.close()
    convert_disks(disks_list, options)

    print "\n\nConversion completed and placed in: %s" % options.output_dir

    
if __name__ == "__main__":
    try:
        main()
    except SystemExit, e:
        sys.exit(e.code)
    except KeyboardInterrupt, e:
        print >> sys.stderr, "Aborted at user request"
    except Exception, e:
        logging.exception(e)
        sys.exit(1)

